//- Common mixins that templates can share

mixin Nav(multipage)
    div.col-md-3
        nav#nav.collapse.hidden-sm.hidden-xs.affix.nav
            if multipage
                .list-group
                    a.list-group-item.heading(href="#") Home
            each resourceGroup in api.resourceGroups
                .list-group
                    a.list-group-item.heading(href="##{(multipage ? 'page:' : '') + slug(resourceGroup.name)}")
                        = resourceGroup.name || 'Resource Group'
                    each resource in resourceGroup.resources
                        if !condenseNav || (resource.actions.length != 1)
                            a.list-group-item(href="##{multipage ? 'page:' + slug(resourceGroup.name) + ',header:' : ''}#{slug(resourceGroup.name)}-#{slug(resource.name)}")
                                i.fa.fa-bars
                                | &nbsp;
                                = resource.name || 'Resource'
                            each action in resource.actions
                                a.list-group-item(href="##{multipage ? 'page:' + slug(resourceGroup.name) + ',header:' : ''}#{slug(resourceGroup.name)}-#{slug(resource.name)}-#{slug(action.method)}", style="padding-left: 32px")
                                    +Icon(action.method)
                                    | &nbsp;
                                    = action.name || action.method + ' ' + resource.uriTemplate
                        else
                            a.list-group-item(href="##{multipage ? 'page:' + slug(resourceGroup.name) + ',header:' : ''}#{slug(resourceGroup.name)}-#{slug(resource.name)}")
                                - var action = resource.actions[0]
                                +Icon(action.method)
                                | &nbsp;
                                = resource.name || action.name || action.method + ' ' + resource.uriTemplate
            if api.metadata && api.metadata.HOST
                p(style="text-align: center")
                    a(href=api.metadata.HOST.value)= api.metadata.HOST.value

mixin Parameters(params)
    ul.list-group
        li.list-group-item.bg-default: strong Parameters
        li.list-group-item
            dl.dl-horizontal
                each name in Object.keys(params)
                    - var param = params[name]
                    dt= name
                    dd
                        code= param.type
                        | &nbsp;
                        if param.required
                            span.required (required)
                        else
                            span (optional)
                        | &nbsp;
                        if param.default
                            span.text-info.default
                                strong Default:&nbsp;
                                span= param.default
                            | &nbsp;
                        if param.example
                            span.text-muted.example
                                strong Example:&nbsp;
                                span= param.example
                        != markdown(param.description)
                        if param.values.length
                            p
                                strong Choices:&nbsp;
                                != '<code>' + param.values.join('</code>, <code>') + '</code>'

mixin RequestResponse(title, request)
    - var id = Math.round(Math.random() * 1000000)
    - var content = Object.keys(request.headers).length || request.body || request.schema
    li.list-group-item
        strong
            = title
            if request.name
                | &nbsp;&nbsp;
                code= request.name
        if content
            a.pull-right(data-toggle="collapse", data-target="##{id}") Toggle
    if content
        li.list-group-item.collapse(id=id)
            if Object.keys(request.headers).length
                h5 Headers
                pre
                    code
                        each name in Object.keys(request.headers)
                            != highlight(name + ': ' + request.headers[name].value, 'http')
                            br
            if request.body
                h5 Body
                pre
                    code!= highlight(request.body)
            if request.schema
                h5 Schema
                pre
                    code!= highlight(request.schema)


mixin Examples(examples)
    ul.list-group
        each example in examples
            each request in example.requests
                +RequestResponse('Request', request)
            each response in example.responses
                +RequestResponse('Response', response)
                        
mixin ResourceGroup(resourceGroup, getButtonClass, multipage)
    .panel.panel-default
        .panel-heading
            h3(id="#{slug(resourceGroup.name)}")
                = resourceGroup.name || 'Resource Group'
                | &nbsp;
                a(href="##{multipage ? 'page:' : ''}#{slug(resourceGroup.name)}")
                    i.fa.fa-link
        .panel-body
            if resourceGroup.description
                != markdown(resourceGroup.description)
            each resource in resourceGroup.resources
                h4(id="#{slug(resourceGroup.name)}-#{slug(resource.name)}")
                    = resource.name || 'Resources'
                    | &nbsp;
                    a(href="##{(multipage ? 'page:' + slug(resourceGroup.name) + ',header:' : '')}#{slug(resourceGroup.name)}-#{slug(resource.name)}")
                        i.fa.fa-link
                if resource.description
                    != markdown(resource.description)
                each action in resource.actions
                    case action.method
                        when 'POST': - var panelClass = 'panel-success'
                        when 'GET': - var panelClass = 'panel-info'
                        when 'PUT': - var panelClass = 'panel-warning'
                        when 'PATCH': - var panelClass = 'panel-warning'
                        when 'DELETE': - var panelClass = 'panel-danger'
                        default: - var panelClass = 'panel-default'
                    section.panel(class=panelClass, id="#{slug(resourceGroup.name)}-#{slug(resource.name)}-#{slug(action.method)}")
                        .panel-heading
                            if action.name
                                span.pull-right(style="text-transform: lowercase")= action.name
                            case action.method
                                when 'POST': - var btnClass = 'btn-success'
                                when 'GET': - var btnClass = 'btn-' + getButtonClass
                                when 'PUT': - var btnClass = 'btn-warning'
                                when 'PATCH': - var btnClass = 'btn-warning'
                                when 'DELETE': - var btnClass = 'btn-danger'
                                default: - var btnClass = 'btn-default'
                            a.btn.btn-xs(class=btnClass, href="##{(multipage ? 'page:' + slug(resourceGroup.name) + ',header:' : '')}#{slug(resourceGroup.name)}-#{slug(resource.name)}-#{slug(action.method)}")= action.method
                            | &nbsp;
                            code= resource.uriTemplate
                        if action.description
                            .panel-body!= markdown(action.description)

                        - var params = Object.keys(action.parameters).length ? action.parameters : resource.parameters
                        if Object.keys(params).length
                            +Parameters(params)
                        if action.examples
                            +Examples(action.examples)

mixin Paginate(resourceGroups, index)
    if index < resourceGroups.length - 1
        a.btn.btn-default.pull-right(href="#page:#{slug(resourceGroups[index + 1].name)}")
            | Next&nbsp;
            i.fa.fa-arrow-circle-right

    if index > 0
        a.btn.btn-default(href="#page:#{slug(resourceGroups[index - 1].name)}")
            i.fa.fa-arrow-circle-left
            |  Previous
    else
        a.btn.btn-default(href="#")
            i.fa.fa-arrow-circle-left
            |  Previous
    .clearfix
    hr

mixin Icon(method)
    case method
        when 'GET'
            i.fa.fa-arrow-circle-down
        when 'POST'
            i.fa.fa-plus-square
        when 'PUT'
            i.fa.fa-pencil
        when 'PATCH'
            i.fa.fa-pencil
        when 'DELETE'
            i.fa.fa-warning
        default
            i.fa.fa-dot-circle-o

mixin Content(getButtonClass, multipage)
    div(data-bind=multipage ? "visible: page() == 'home'" : undefined)
        header
            .page-header
                h1#top= api.name || 'API Documentation'
    
        .description!= markdown(api.description)

        if multipage
            a.btn.btn-default.pull-right(href="#page:#{slug(api.resourceGroups[0].name)}")
                | Next&nbsp;
                i.fa.fa-arrow-circle-right
            .clearfix
            hr

    each resourceGroup, index in api.resourceGroups
        div(data-bind=multipage ? "visible: page() == '#{slug(resourceGroup.name)}', style: {marginTop: page() == '#{slug(resourceGroup.name)}' ? '38px' : ''}" : undefined)
            +ResourceGroup(resourceGroup, getButtonClass, multipage)

            if multipage
                +Paginate(api.resourceGroups, index)

mixin Multipage()
    //- Multi-page support through Knockout.js
    script(src="http://cdnjs.cloudflare.com/ajax/libs/knockout/3.0.0/knockout-min.js")
    :coffee
        class App
            constructor: ->
                @page = ko.observable 'home'

        window.app = new App()

        window.onhashchange = ->
            vars = {}
            for v in location.hash.substr(1).split(',')
                parts = v.split ':'
                vars[parts[0]] = parts[1]

            # Set the page
            window.app.page vars.page or 'home'

            # Scroll to a header if Set
            if vars.header
                $("##{vars.header}")[0].scrollIntoView true
            else
                window.scrollTo 0, 0

        ko.applyBindings window.app

        # Load the correct page
        window.onhashchange()
